@page "/test"

<h3>Table</h3>

<div class="container">
    @if (!isAuthenticated)
    {
        <div class="col-md-6 offset-md-3">
            <h4>Login</h4>
            <input type="text" placeholder="Username" @bind="username" class="form-control" />
            <input type="password" placeholder="Password" @bind="password" class="form-control mt-2" />
            <button class="btn btn-primary mt-2" @onclick="HandleLogin">Login</button>
        </div>
    }
    else
    {
        <div class="col-md-12">
            <input type="text" placeholder="Search by First Name" @bind="searchQuery" @oninput="OnSearchQueryChanged" />
            <button class="btn btn-success mt-2" @onclick="DownloadPDF">Download PDF</button>

            <table id="dataTable" class="table table-hover mt-3">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">First</th>
                        <th scope="col">Last</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var person in FilteredPeople)
                    {
                        <tr>
                            <th scope="row">@person.Id</th>
                            <td>@person.FirstName</td>
                            <td>@person.LastName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        @successMessage
    </div>
}


@code {
    public class Person
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    private List<Person> people;
    private List<Person> filteredPeople;
    private string searchQuery = string.Empty;
    private bool isAuthenticated = false;  // Track the authentication state
    private string username = string.Empty;
    private string password = string.Empty;
    private string successMessage = string.Empty;

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        string jsonData = @"
        [
            { ""Id"": 1, ""FirstName"": ""Mark"", ""LastName"": ""Otto"" },
            { ""Id"": 2, ""FirstName"": ""Jacob"", ""LastName"": ""Thornton"" },
            { ""Id"": 3, ""FirstName"": ""Larry"", ""LastName"": ""Bird"" }
        ]";

        people = System.Text.Json.JsonSerializer.Deserialize<List<Person>>(jsonData);
        filteredPeople = people;
    }

    private string SearchQuery
    {
        get => searchQuery;
        set
        {
            if (searchQuery != value)
            {
                searchQuery = value;
                FilterPeople();
                StateHasChanged(); // Notify the UI of the change
            }
        }
    }

    private List<Person> FilteredPeople
    {
        get => filteredPeople;
    }

    private void FilterPeople()
    {
        filteredPeople = people.Where(p => p.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
    }

    private void HandleLogin()
    {
        // Simple authentication logic (replace with actual authentication logic)
        if (username == "admin" && password == "password")
        {
            isAuthenticated = true;
        }
        else
        {
            // Show an error message or handle failed login
        }
    }

     private async Task DownloadPDF()
     {   
        await JSRuntime.InvokeVoidAsync("console.log", "DownloadPDF function called!");
        await JSRuntime.InvokeVoidAsync("generatePDF", "dataTable");
     }

    [JSInvokable]
     public static Task OnPDFDownloaded()
    {
    
         Console.WriteLine("PDF download succeeded.");
       
         return Task.CompletedTask;
     }
    // [JSInvokable]
    // public async Task NotifyDownloadSuccess()
    // {
    //     successMessage = "PDF has been successfully downloaded.";
    //     await InvokeAsync(StateHasChanged); // Refresh the UI to show the message
         
    // }

   
}



